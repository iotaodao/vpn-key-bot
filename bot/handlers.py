# -*- coding: utf-8 -*-
import logging
from typing import List

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import hcode, hbold

from config import ADMIN_IDS, MESSAGES, KEY_FORMAT
from database import UserDatabase

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await message.reply(
        MESSAGES['welcome'],
        parse_mode=types.ParseMode.HTML
    )

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    
    if is_admin(user_id):
        help_text = MESSAGES['help'] + "\n\n" + MESSAGES['admin_help']
    else:
        help_text = MESSAGES['help']
    
    await message.reply(help_text, parse_mode=types.ParseMode.HTML)

async def cmd_key(message: types.Message, db: UserDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /key –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞"""
    user = message.from_user
    user_id = user.id
    username = user.username
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    keys = db.get_user_keys(user_id, username)
    
    if not keys:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –Ω–æ –±–µ–∑ –∫–ª—é—á–µ–π
        user_data = db.find_user(user_id, username)
        if user_data:
            await message.reply(MESSAGES['no_keys'])
        else:
            await message.reply(MESSAGES['user_not_found'])
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–ª—é—á–∞–º–∏
    if len(keys) == 1:
        response = KEY_FORMAT['single'].format(key=hcode(keys[0]))
    else:
        formatted_keys = "\n".join([
            f"{i+1}. `{key}`" for i, key in enumerate(keys)
        ])
        response = KEY_FORMAT['multiple'].format(keys=formatted_keys)
    
    await message.reply(response, parse_mode=types.ParseMode.MARKDOWN)
    logger.info(f"–ö–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

async def cmd_admin_stats(message: types.Message, db: UserDatabase):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    stats = db.get_stats()
    
    stats_text = (
        f"üìä {hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')}\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚úÖ –° –∫–ª—é—á–∞–º–∏: {stats['users_with_keys']}\n"
        f"‚ùå –ë–µ–∑ –∫–ª—é—á–µ–π: {stats['users_without_keys']}"
    )
    
    await message.reply(stats_text, parse_mode=types.ParseMode.HTML)

async def cmd_admin_users(message: types.Message, db: UserDatabase):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    users = db.get_all_users()
    
    if not users:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return
    
    users_text = f"{hbold('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')}\n\n"
    
    for i, user in enumerate(users[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        user_id = user.get('telegram_id', 'N/A')
        username = user.get('telegram_username', 'N/A')
        keys_count = len(user.get('keys', []))
        
        users_text += f"{i}. ID: {hcode(user_id)} | @{username} | –ö–ª—é—á–µ–π: {keys_count}\n"
    
    if len(users) > 20:
        users_text += f"\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await message.reply(users_text, parse_mode=types.ParseMode.HTML)

async def cmd_admin_reload(message: types.Message, db: UserDatabase):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        db.reload()
        await message.reply("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def cmd_admin_help(message: types.Message):
    """–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.reply(MESSAGES['admin_help'], parse_mode=types.ParseMode.HTML)

def register_handlers(dp: Dispatcher, db: UserDatabase):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_start, Command('start'))
    dp.register_message_handler(cmd_help, Command('help'))
    dp.register_message_handler(
        lambda message: cmd_key(message, db), 
        Command('key')
    )
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(
        lambda message: cmd_admin_stats(message, db),
        Command('stats')
    )
    dp.register_message_handler(
        lambda message: cmd_admin_users(message, db),
        Command('users')
    )
    dp.register_message_handler(
        lambda message: cmd_admin_reload(message, db),
        Command('reload')
    )
    dp.register_message_handler(cmd_admin_help, Command('admin_help'))
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
